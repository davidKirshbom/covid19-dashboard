[{"C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\index.js":"1","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\router\\router.js":"2","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\router\\history.js":"3","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\context\\ThemeContext.js":"4","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\Navigationbar.js":"5","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\Menu.js":"6","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\MainPage.js":"7","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\server\\data.js":"8","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\respiratoryChart.js":"9","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\charts\\makeChart.js":"10","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\DeathsChart.js":"11","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\PositiveTestsChart.js":"12","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\StaticsRow.js":"13","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\VerifiedAvgWeekly.js":"14","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\SeriouslyIllWeek.js":"15","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\VerifiedOutSideRedZone.js":"16","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\WeeklyCharts.js":"17","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\LookupTag.js":"18","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\EpidemicCurveChart.js":"19","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\CustomSelect.js":"20","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\SeriouslyIllChart.js":"21","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\CitiesByColor.js":"22","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\TestsWeekData.js":"23","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\DeathsChartByDate.js":"24","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\ManagerPage.js":"25","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\charts\\utils.js":"26"},{"size":209,"mtime":1609488966900,"results":"27","hashOfConfig":"28"},{"size":1269,"mtime":1610633453182,"results":"29","hashOfConfig":"28"},{"size":89,"mtime":1609428591733,"results":"30","hashOfConfig":"28"},{"size":72,"mtime":1609431220869,"results":"31","hashOfConfig":"28"},{"size":1297,"mtime":1609702386009,"results":"32","hashOfConfig":"28"},{"size":2457,"mtime":1610635851071,"results":"33","hashOfConfig":"28"},{"size":1305,"mtime":1611050792505,"results":"34","hashOfConfig":"28"},{"size":4078,"mtime":1610479436245,"results":"35","hashOfConfig":"28"},{"size":2003,"mtime":1611050805846,"results":"36","hashOfConfig":"28"},{"size":3992,"mtime":1610990031897,"results":"37","hashOfConfig":"28"},{"size":1519,"mtime":1609695041928,"results":"38","hashOfConfig":"28"},{"size":1462,"mtime":1609696124736,"results":"39","hashOfConfig":"28"},{"size":8563,"mtime":1610989902952,"results":"40","hashOfConfig":"28"},{"size":5852,"mtime":1611055081628,"results":"41","hashOfConfig":"28"},{"size":5212,"mtime":1611055788063,"results":"42","hashOfConfig":"28"},{"size":4362,"mtime":1611055166773,"results":"43","hashOfConfig":"28"},{"size":1740,"mtime":1610991266024,"results":"44","hashOfConfig":"28"},{"size":427,"mtime":1610990653135,"results":"45","hashOfConfig":"28"},{"size":8594,"mtime":1611053752565,"results":"46","hashOfConfig":"28"},{"size":1149,"mtime":1610093720836,"results":"47","hashOfConfig":"28"},{"size":8372,"mtime":1611053875947,"results":"48","hashOfConfig":"28"},{"size":8666,"mtime":1611052708151,"results":"49","hashOfConfig":"28"},{"size":8243,"mtime":1611055945022,"results":"50","hashOfConfig":"28"},{"size":5893,"mtime":1611052584281,"results":"51","hashOfConfig":"28"},{"size":126,"mtime":1610633420135,"results":"52","hashOfConfig":"28"},{"size":861,"mtime":1611052413133,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"g6dbgh",{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"56"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"56"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"56"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"56"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"56"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\index.js",[],["129","130"],"C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\router\\router.js",["131","132"],"import React from 'react'\r\nimport { Link, Switch, Route, Router } from \"react-router-dom\";\r\nimport ThemeContext from '../context/ThemeContext'\r\nimport {useState}from 'react'\r\nimport history from './history'\r\nimport MainPage from '../components/MainPage'\r\nimport Navigationbar from '../components/Navigationbar'\r\nimport Menu from '../components/Menu'\r\nimport '../styles/style.scss'\r\nimport ManagerPage from '../components/ManagerPage';\r\n\r\nexport default () => {\r\nconst [isThemeWhite,setIsThemeWhite]=useState(true)\r\nconst [isMenuOpen,setIsMenuOpen]=useState(false)\r\n    return (\r\n<ThemeContext.Provider value={{isThemeWhite,setIsThemeWhite}}>\r\n    <Router history={history}>\r\n        <header>\r\n                    <Navigationbar isMenuOpen={isMenuOpen} onClickBurgerButton={() => { console.log(\"click\");setIsMenuOpen(!isMenuOpen)}}/>\r\n        </header>\r\n                <section className=\"main-section\">\r\n               \r\n                    <Menu setIsOpen={setIsMenuOpen} isOpen={isMenuOpen}></Menu>\r\n                    <Switch>\r\n                        <Route path=\"/\" exact component={MainPage} />\r\n                        <Route path=\"/manger\" component={ManagerPage}/>\r\n            </Switch>   \r\n        </section>\r\n    </Router>\r\n</ThemeContext.Provider >\r\n)\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\router\\history.js",[],"C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\context\\ThemeContext.js",[],"C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\Navigationbar.js",["133","134"],"import React,{useContext} from 'react'\r\nimport themeContext from '../context/ThemeContext'\r\nimport logo from '../images/logo_dashboard.png'\r\nexport default ({onClickBurgerButton,isMenuOpen}) => {\r\n    const { isThemeWhite, setIsThemeWhite } = useContext(themeContext)\r\n    \r\n    return (\r\n        <div className=\"navigation-container\">\r\n        \r\n        <div className=\"right-side-container\">\r\n            <div className={`burger-button ${isMenuOpen?'open':''}`} onClick={onClickBurgerButton}>\r\n            <div id=\"burger-line-1\" className=\"burger-btn-line\"></div>\r\n            <div id=\"burger-line-2\" className=\"burger-btn-line\"></div>\r\n            <div id=\"burger-line-3\" className=\"burger-btn-line\"></div>\r\n            </div>\r\n            <img className=\"logo\" src={logo}></img>\r\n        </div>\r\n        <div className=\"left-side-container\">\r\n        \r\n        <div className=\"title-container\">\r\n            <span className=\"title\">נגיף הקורונה בישראל - תמונת מצב כללית</span>\r\n            <span className=\"subtitle\">עדכון אחרון: 31 בדצמבר 2020 | 10:25</span>\r\n        </div>\r\n        <button className=\"rounded-button theme-button\" onClick={()=>setIsThemeWhite(!isThemeWhite)}>לתצוגה נגישה</button>\r\n        </div>\r\n        </div>)\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\Menu.js",["135","136","137","138","139"],"import React,{useState} from 'react'\r\n\r\n\r\nexport default ({ isOpen,setIsOpen }) => {\r\n    const [selectedLink, setSelectedLink] = useState(1);\r\n    return (\r\n        <div className={`menu-container ${isOpen?\"open\":\"close\"}`}>\r\n            <div className=\"navigator-container\">\r\n                <a onClick={()=>{setIsOpen(false);setSelectedLink(1)}} className={`menu-link ${selectedLink===1?\"selected\":\"\"}`}>\r\n                    <span >\r\n                        <svg  width=\"24px\" height=\"25px\" viewBox=\"0 0 24 25\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" >\r\n                <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n                    <g id=\"עומסים\" transform=\"translate(-1388.000000, -158.000000)\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                        <path d=\"M1398,171.5 L1398,182 L1389,182 L1389,171.5 L1398,171.5 Z M1411,174 L1411,182 L1402.5,182 L1402.5,174 L1411,174 Z M1411,159 L1411,169.5 L1402.5,169.5 L1402.5,159 L1411,159 Z M1398,159 L1398,167 L1389,167 L1389,159 L1398,159 Z\" id=\"Combined-Shape\"></path>\r\n                    </g>\r\n                </g>\r\n                        </svg>\r\n                    </span>\r\n                    מצב כללי\r\n                </a>\r\n                <a onClick={()=>{setIsOpen(false);setSelectedLink(2)}} className={`menu-link ${selectedLink===2?\"selected\":\"\"}`}>אודות</a>\r\n                <a onClick={()=>{setIsOpen(false);setSelectedLink(3)}} className={`menu-link ${selectedLink===3?\"selected\":\"\"}`}>תנאי שימוש</a>\r\n                <a onClick={() => { setIsOpen(false); setSelectedLink(4) }} className={`menu-link ${selectedLink === 4 ? \"selected\" : \"\"}`}>מדריך למשתמש</a>\r\n                <div onClick={() => { setSelectedLink(5) }} className={`menu-link login-container   ${selectedLink === 5 ? \"show-login\" : \"\"}`}>\r\n                 <div className=\"menu-link\">מנהלן</div> \r\n                    <form className={` login ${selectedLink === 5 ? \"show\" : \"\"}`}>\r\n                        <input type=\"text\" name=\"username\" placeholder=\"שם משתמש\" className=\"login-input\"></input>\r\n                        <input type=\"text\" name=\"password\" placeholder=\"סיסמא\" className=\"login-input\"></input>\r\n                        <input type=\"submit\" className=\"rounded-button login-button\" value=\"התחבר\"></input>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n    </div>)\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\MainPage.js",["140","141","142","143","144","145","146"],"import themeContext from '../context/ThemeContext'\nimport React, { useContext, useEffect ,useState} from 'react'\n\nimport DeathsChartByDate from './charts/DeathsChartByDate'\nimport StaticsRow from '../components/StaticsRow'\nimport WeeklyCharts from './WeeklyCharts'\nimport LookupTag from './LookupTag'\nimport moment, { months } from 'moment'\nimport EpidemicCurveChart from './charts/EpidemicCurveChart'\nimport CustomSelect from './CustomSelect'\nimport SeriouslyIllChart from './charts/SeriouslyIllChart'\nimport CitiesByColor from './CitiesByColor'\nimport TestsWeekData from './charts/TestsWeekData'\nexport default () => {\n \n  \n  const { isThemeWhite } = useContext(themeContext)\n\n  \n  return (\n    <div className={`main-page-container ${isThemeWhite?'':'black-theme'}`}  >\n        <StaticsRow />\n        <WeeklyCharts />\n      <div className=\"flex-row-wrapper\">\n        <EpidemicCurveChart isThemeWhite={isThemeWhite} />\n        <SeriouslyIllChart isThemeWhite={isThemeWhite}/>\n      </div>\n      <div id=\"city-and-test-section\" className=\"flex-row-wrapper\">\n        <CitiesByColor isThemeWhite={isThemeWhite}/>\n        <TestsWeekData isThemeWhite={isThemeWhite}/>\n      </div>\n      <div className=\"flex-row-wrapper\">\n        <DeathsChartByDate isThemeWhite={isThemeWhite}/>\n      </div>\n    </div>\n )\n}\n\n","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\server\\data.js",[],"C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\respiratoryChart.js",["147","148","149","150"],"import React, { useEffect , useState} from 'react'\r\nimport moment from 'moment'\r\nimport { getGeneralStatics } from '../../server/data'\r\nimport respiratoryChart from '../../charts/makeChart'\r\nimport {updateCharByCurrentTheme} from '../../charts/utils'\r\n\r\nexport default ({ isOpen, data, isThemeWhite }) => {\r\n  const [chart,setChart]=useState()\r\n  useEffect(() => {\r\n      if (chart) {\r\n          setChart(updateCharByCurrentTheme(chart,isThemeWhite))\r\n          chart.update();\r\n     }\r\n  },[isThemeWhite])\r\n    const getChartLineData = (people) => {\r\n        let day = moment('02/03/2020','DD/MM/YYYY');\r\n        const end = moment().clone();\r\n        const result = [];\r\n        while (day.isSameOrBefore(end)) {\r\n          \r\n          let count = 0;\r\n          people.forEach(person => {      \r\n            if (person.statuses.some((status) => { \r\n              \r\n              return status.isRespiratory&&(moment(status.createdAt).isSameOrBefore(day) && (!status.end_date || moment(status.end_date).isSameOrAfter(day)))\r\n            }))\r\n            {\r\n              count++;\r\n            }\r\n          });\r\n          result.push({ x: day.clone().format('D.M').toString(), y:count });\r\n          day.add('1','day')\r\n        }\r\n        return result\r\n        \r\n      }\r\n    useEffect(() => {                \r\n            if(isOpen)\r\n                respiratoryChart('respiratory-chart',getChartLineData(data),isThemeWhite,{xTitle:'תאריך',yTitle:'כמות מונשמים',chartTitle:'מונשמים',toolTipPostfix:'מונשמים'})\r\n            else \r\n                respiratoryChart('respiratory-chart', [],isThemeWhite,{xTitle:'תאריך',yTitle:'כמות מונשמים',chartTitle:'מונשמים',toolTipPostfix:'מונשמים'})\r\n          \r\n            \r\n        \r\n    }, [isOpen])\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n    return (\r\n    <div id=\"respiratory-chart-container\" className={`small-chart-container ${isOpen ? 'open' : ''}`}>\r\n    <canvas id=\"respiratory-chart\" ></canvas>\r\n    </div>)\r\n\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\charts\\makeChart.js",["151","152"],"\r\n\r\nimport Chart from 'chart.js'\r\n\r\nconst getLimitedTicks=(ticks)=> {\r\n  const skipParameter = Math.floor(ticks.length / 5);\r\n  return [ticks[0], ticks[skipParameter], ticks[skipParameter * 2], ticks[skipParameter * 3], ticks[skipParameter * 4]]\r\n}\r\n\r\nexport default (containerName, data,isThemeWhite ,{ xTitle, yTitle, chartTitle, toolTipPostfix } = {}) => {\r\n\r\n\r\n  let ctx = document.getElementById(containerName);\r\n  let gradient = ctx.getContext('2d').createLinearGradient(0, 0, 0, 500);\r\n  let xTicks=getLimitedTicks(data.map(data=>data.x))\r\n  gradient.addColorStop(0, 'rgba(83, 204, 253, 1)');\r\n  gradient.addColorStop(0.25, 'rgba(204, 243, 246, 0.5)');\r\n  gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n  const lineArray = data\r\n  var myChart = new Chart(ctx, {\r\n\r\n    type: 'line',\r\n    data: {\r\n        \r\n        datasets: [{\r\n          label: {\r\n              \r\n            },\r\n          data:data.length>0? lineArray.map(data=>data.y):undefined,\r\n            \r\n            backgroundColor: \r\n                gradient\r\n            ,\r\n            borderColor: \r\n                '#53ccfd'\r\n              ,\r\n          borderWidth: 5,\r\n          pointRadius: 0,\r\n          \r\n      },\r\n        {\r\n        type:'bubble',\r\n        label: {\r\n            \r\n          },\r\n        data:data.length>0? lineArray.filter(data=>!xTicks.includes(data.x)).map(data=>data.y):undefined,\r\n          \r\n          backgroundColor: \r\n              gradient\r\n          ,\r\n          borderColor: \r\n              '#53ccfd'\r\n            ,\r\n        borderWidth: 5,\r\n        pointRadius: 0,\r\n        \r\n      }\r\n      ]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      title: {\r\n        display:true,\r\n        text:chartTitle||'',\r\n        fontColor:isThemeWhite?'':'white'\r\n        \r\n      },\r\n      legend: {\r\n        \r\n          display:false,\r\n      },\r\n      scales: {\r\n        \r\n        xAxes: [{\r\n          afterBuildTicks() {            \r\n            return xTicks\r\n          },\r\n          labels: lineArray.map(data => data.x),\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: xTitle||'',\r\n            fontSize: 15,\r\n            fontColor:isThemeWhite?'':'white'\r\n          },\r\n          ticks: {\r\n            fontColor:isThemeWhite?'':'white'\r\n          }\r\n         }],\r\n        yAxes: [{\r\n          labels: lineArray.map(data => data.y),\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: yTitle||'',\r\n            fontSize: 15,\r\n            fontColor:isThemeWhite?'':'white'\r\n          },\r\n                ticks: {\r\n                  \r\n                  maxTicksLimit: 5,\r\n                  fontColor:isThemeWhite?'':'white'\r\n                }\r\n            }]\r\n      },\r\n      tooltips: {\r\n        displayColors: false,\r\n        backgroundColor: 'white',\r\n        bodyFontColor: '#53ccfd',\r\n        titleFontColor: '#53ccfd',\r\n        titleAlign:'center',\r\n        callbacks: {\r\n          title: function (item) {\r\n            return item[0].label\r\n          },\r\n          label: function (item) {\r\n           \r\n            return item.value+ (toolTipPostfix||'');\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n});\r\n}\r\n\r\n\r\n//highcharts\r\n// export default (containerName, data) => {\r\n  \r\n//     const dates = getXDates();\r\n//     const lineArray=getChartLineData(data)\r\n//   highCharts.chart(containerName, {\r\n//     chart: {\r\n//       type: 'areaspline',\r\n     \r\n//     },\r\n//     title: {\r\n//       text: 'מונשמים - שינוי יומי'\r\n//     },\r\n   \r\n//     xAxis: {\r\n//       type: 'category',\r\n//   startOnTick:true,\r\n//       categories: lineArray.map(data => data[0]),\r\n      \r\n     \r\n//       labels: {\r\n//         autoRotation:0,\r\n//         padding:105+\"px\",\r\n   \r\n     \r\n        \r\n//       }\r\n//     },\r\n//     credits:false,\r\n//     series: [\r\n//       {\r\n//         name: '',\r\n//         data: lineArray,\r\n//         color:highCharts.getOptions().colors[0]\r\n//     }]\r\n// })\r\n// }",["153","154"],"C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\DeathsChart.js",["155","156","157","158"],"import React, { useEffect } from 'react'\r\nimport moment from 'moment';\r\nimport { getGeneralStatics } from '../../server/data'\r\nimport respiratoryChart from '../../charts/makeChart'\r\n\r\nexport default ({ isOpen,data }) => {\r\n    useEffect(() => {\r\n            if(isOpen)\r\n                respiratoryChart('deaths-chart', getChartLineData(data),{xTitle:'תאריך',yTitle:'כמות נפטרים',chartTitle:'נפטרים - שינוי יומי', toolTipPostfix:'נפטרים'})\r\n            else \r\n            respiratoryChart('deaths-chart', [])\r\n        \r\n    }, [isOpen])\r\n    const getChartLineData = (people) => {\r\n        let day = moment('02/03/2020','DD/MM/YYYY');\r\n        const end = moment().clone();\r\n        const result = [];\r\n        let count = 0;\r\n    \r\n        while (day.isSameOrBefore(end)) {         \r\n          people.forEach(person => {      \r\n            if (person.statuses.some((status) => { \r\n              \r\n               \r\n                return status.name === 'נפטר' && (moment(status.createdAt).startOf('day').isSame(day.startOf('day')))\r\n          \r\n            }))\r\n            {\r\n              count++;\r\n            }\r\n          });\r\n          result.push({ x: day.clone().format('D.M').toString(), y:count });\r\n          day.add('1','day')\r\n        }\r\n        return result   \r\n      }\r\n    \r\n\r\n    \r\n\r\n\r\n    return (\r\n    <div id=\"respiratory-chart-container\" className={`small-chart-container ${isOpen ? 'open' : ''}`}>\r\n    <canvas id=\"deaths-chart\" ></canvas>\r\n    </div>)\r\n\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\PositiveTestsChart.js",["159","160"],"import React, { useEffect } from 'react'\r\nimport moment from 'moment';\r\n\r\nimport respiratoryChart from '../../charts/makeChart'\r\n\r\nexport default ({ isOpen,data }) => {\r\n    useEffect(() => {\r\n            if(isOpen)\r\n                respiratoryChart('Positive-test-chart', getChartLineData(data),{xTitle:'תאריך',yTitle:'מספר בדיקות יומיות',chartTitle:'בדיקות - מגמת שינוי יומית',toolTipPostfix:'בדיקות'})\r\n            else \r\n            respiratoryChart('Positive-test-chart', [])\r\n        \r\n    }, [isOpen])\r\n    const getChartLineData = (people) => {\r\n        let day = moment('01/01/2020','DD/MM/YYYY');\r\n        const end = moment().clone();\r\n        const result = [];\r\n      \r\n        while (day.isSameOrBefore(end)) {  \r\n            let count = 0;\r\n          people.forEach(person => {      \r\n            person.statuses.forEach((status) => { \r\n              \r\n                if ((moment(status.createdAt).startOf('day').isSame(day.startOf('day')) && status.name === 'נבדק'))\r\n                    count++;\r\n            })\r\n          });\r\n        \r\n          result.push({ x: day.clone().format('D.M').toString(), y:count });\r\n          day.add('1','day')\r\n        }\r\n        return result   \r\n      }\r\n    \r\n\r\n    \r\n\r\n\r\n    return (\r\n    <div id=\"respiratory-chart-container\" className={`small-chart-container ${isOpen ? 'open' : ''}`}>\r\n    <canvas id=\"Positive-test-chart\" ></canvas>\r\n    </div>)\r\n\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\StaticsRow.js",["161"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport themeContext from '../context/ThemeContext'\r\nimport DeathsChart from './charts/DeathsChart'\r\nimport PositiveTestsChart from './charts/PositiveTestsChart'\r\nimport RespiratoryChart from './charts/respiratoryChart'\r\nimport {getGeneralStatics} from '../server/data'\r\nexport default () => {\r\n    const chartsName={respiratory:'respiratory',deaths:'deaths',positiveTests:'positiveTests'}\r\n    const { isThemeWhite } = useContext(themeContext)\r\n \r\n    const [data, setData] = useState()\r\n    const [selectedChartOpen,setSelectedChartOpen]=useState()\r\n    useEffect(() => {\r\n        getGeneralStatics().then((value) => {          \r\n           setData(value)\r\n                  })\r\n      },[])\r\n    const getInfoTag = (textHtml) => {\r\n        return (\r\n          <div className=\"info-container\">\r\n            <i className=\"fas fa-info-circle\"></i>\r\n            <div className=\"info-text\" dangerouslySetInnerHTML={{__html:textHtml}}></div>\r\n        </div>)\r\n      }\r\n      \r\n      return (\r\n        <div className=\"flex-row center general-statics-container\">\r\n          <div className={`general-statics  ${isThemeWhite?'':'black-theme'}`}  >\r\n          <div className=\"static-square\">\r\n            <div className=\"title\">מאומתים חדשים אתמול {getInfoTag(`<p>סך הנדבקים בנגיף COVID-19 בישראל שאותרו משעה 00:00 עד שעה 23:59 של יום אתמול</p>\r\n    \r\n            <p>מאומת-כל מי שנבדק ונמצא חיובי לנגיף COVID-19, בים אם הופיעו אצלו תסמינים ובין אם לא, בים אם הוא חולה, החלים או נפטר</p>`) }</div>\r\n              <div className=\"static-prime-data\">{data?data.verifiedSick.fromYesterdayVerifiedUntilNow.length:'Not available'}</div>\r\n              <div className=\"static-sub-data\"><strong>{data?data.verifiedSick.fromMidnightUntilNow.length:'Not available'}+</strong> מחצות</div>\r\n              <div className=\"static-sub-data\"><strong>{data?data.verifiedSick.allTimesCount:'Not available' }</strong> סה\"כ</div>\r\n          </div>\r\n          <div className=\"static-square\">\r\n            <div className=\"title\">חולים פעילים {getInfoTag(`<p>חולה פעיל - כל מי שנבדק ונמצא חיובי לנגיף COVID-19, ללא קשר להופעת תסמינים, שטרם הוגדר כמחלים ושלא נפטר</p>`) }</div>\r\n              <div className=\"static-prime-data\">{data?data.sickPeople.allCurrentSick.length:'Not available' }</div>\r\n              <div className=\"static-sub-data\"><strong>{data?data.sickPeople.fromMidnightUntilNow.length:'Not available' }+</strong> מחצות</div>\r\n            <div className=\"static-bottom-data flex-row\">\r\n              <div className=\"detail-box\">\r\n                <div className=\"detail-title\">בית / קהילה</div>\r\n                  <div className=\"detail-content\"><strong>{ data?data.sickPeople.locationsCount.home:'Not available' }</strong></div>\r\n              </div>\r\n              <div className=\"detail-box\">\r\n              <div className=\"detail-title\">מלון</div>\r\n              <div className=\"detail-content\"><strong>{ data?data.sickPeople.locationsCount.hotels:'Not available' }</strong></div>\r\n              </div>\r\n              <div className=\"detail-box\">\r\n              <div className=\"detail-title\">בי\"ח</div>\r\n              <div className=\"detail-content\"><strong>{ data?data.sickPeople.locationsCount.hospitals:'Not available' }</strong></div>\r\n            </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"static-square\">\r\n            <div className=\"title\">חולים קשים {getInfoTag(`<p>סך החולים במצב קשה וקריטי כפי שהוגדרו ע\"י מערכת הבריאות, המאושפזים בבתי החולים</p>`) }</div>\r\n              <div className=\"static-prime-data\">{data?data.sickPeople.SeriouslyIll.length:'Not available'}</div>\r\n            <div className=\"static-sub-data\"><strong>{data?data.sickPeople.SeriouslyIllSinceMidnight:'Not available' }</strong> מחצות</div>\r\n            <div className=\"static-bottom-data flex-column\">\r\n              <div className=\"detail-line\">\r\n                <div className=\"detail-content\"><span className=\"circle redpink-bg\"></span>מתוכם קריטי <strong>{data?data.sickPeople.SeriouslyIll.filter(person=>person.statuses[person.statuses.length-1].detail==='קריטי').length:''}</strong></div>\r\n              </div>\r\n              <div className=\"detail-line\">\r\n             \r\n                  <div className=\"detail-content\"><div className=\"circle yellow-bg\"></div>בינוני <strong>{data?data.sickPeople.mediumIll.length:'' }</strong></div>\r\n              </div>\r\n              \r\n            </div>\r\n          </div>\r\n          <div className={`static-square ${selectedChartOpen===chartsName.respiratory?'selected':''}`}>\r\n            <div className=\"title\">מונשמים{getInfoTag(`<p>סך החולים בנגיף COVID-19 המחוברים למכונת הנשמה בבתי חולים</p>`) }</div>\r\n              <div className=\"static-prime-data\">{data?data.respiratory.allRespiratoryData.length:'' }</div>\r\n            <div className=\"static-sub-data\"><strong>{data?data.respiratory.changeTodayAndMidnight:'' }</strong> מחצות</div>\r\n            <div className=\"static-bottom-data\">\r\n              <div className=\"detail-chart-title\">\r\n                <p><i onClick={() => {setSelectedChartOpen(selectedChartOpen===chartsName.respiratory?'':chartsName.respiratory)\r\n                }} class=\"fas fa-signal\"></i>מגמת שינוי יומית</p>\r\n                <RespiratoryChart isThemeWhite={isThemeWhite}  isOpen={selectedChartOpen===chartsName.respiratory} data={data?data.respiratory.allRespiratoryData:[]} ></RespiratoryChart>\r\n                \r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={`static-square ${selectedChartOpen===chartsName.deaths?'selected':''}`}>\r\n            <div className=\"title\">נפטרים מצטבר{getInfoTag(`<p>סך הנפטרים מנגיף covid-19 בישראל, החל מפרוץ המגפה</p>`) }</div>\r\n              <div className=\"static-prime-data\">{data?data.deathsData.length:'' }</div>\r\n            <div className=\"static-sub-data\"> </div>\r\n            <div className=\"static-bottom-data\">\r\n              <div className=\"detail-chart-title\">\r\n                <p id=\"death-chart-icon\"><i onClick={() => {\r\n                 \r\n                  setSelectedChartOpen(selectedChartOpen===chartsName.deaths?'':chartsName.deaths)\r\n               \r\n                  \r\n                }} class=\"fas fa-signal\"></i>מגמת שינוי יומית</p>\r\n                <DeathsChart isThemeWhite={isThemeWhite}  isOpen={selectedChartOpen===chartsName.deaths}  data={data?data.deathsData:[]}></DeathsChart>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={`static-square ${selectedChartOpen===chartsName.positiveTests?'selected':''}`}>\r\n            <div className=\"title\">אחוז בדיקות חיוביות אתמול{getInfoTag(`<p>אחוז הבדיקות החיוביות מתוך סך הבדיקות לגילוי הנגיף בפעם הראשונה לכל נבדק. שתוצאותיהן התקבלו משעה : עד שעה : של יום אתמול</p><p>בדיקות אתמול - מספר תוצאות של בדיקות, הן לבדיקה לזיהוי ראשוני של הנגיף והן לבדיקה נלוות לקביעת החלמה, שהתקבלו החל מחצות : עד שעה : של יום אתמול</p>`) }</div>\r\n              <div className=\"static-prime-data\">%{data?data.testsData.percentPositiveYesterday:'N/A' }</div>\r\n            <div className=\"static-sub-data\"><strong>%{data?data.testsData.percentPositiveToday:'N/A' }</strong> מחצות</div>\r\n            <div className=\"static-bottom-data\">\r\n              <div className=\"detail-chart-title\">\r\n                <p><i onClick={() => {\r\n                    setSelectedChartOpen(selectedChartOpen === chartsName.positiveTests ? '' : chartsName.positiveTests)\r\n                  }} class=\"fas fa-signal\"></i>מגמת שינוי יומית</p>\r\n                <PositiveTestsChart isThemeWhite={isThemeWhite}  isOpen={selectedChartOpen===chartsName.positiveTests}data={data?data.deathsData:[]}></PositiveTestsChart>\r\n                \r\n              </div>\r\n            </div>\r\n            </div>\r\n            </div>\r\n     \r\n        </div>\r\n      );\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\VerifiedAvgWeekly.js",["162","163","164","165"],"import React, { useEffect, useState } from 'react'\r\nimport Chart from 'chart.js'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport axios from 'axios';\r\nimport { getChangesAndDoubleFactorPerWeek } from '../../server/data'\r\nimport respiratoryChart from '../../charts/makeChart'\r\nimport {updateCharByCurrentTheme} from '../../charts/utils'\r\nChart.plugins.unregister(ChartDataLabels);\r\nexport default ({isThemeWhite}) => {\r\n    \r\n    const [chart, setChart] = useState()\r\n   \r\n    useEffect(() => {\r\n        if (chart) {\r\n            setChart(updateCharByCurrentTheme(chart,isThemeWhite))\r\n            chart.update();\r\n       }\r\n    },[isThemeWhite])\r\n\r\n    useEffect(() => {\r\n        let ctx = document.getElementById('verified-avg-chart');\r\n        let gradient = ctx.getContext('2d').createLinearGradient(0, 0, 0, 500);\r\n    \r\n        gradient.addColorStop(0, 'rgba(83, 204, 253, 1)');\r\n        gradient.addColorStop(0.25, 'rgba(204, 243, 246, 0.5)');\r\n        gradient.addColorStop(0.35, 'rgba(0, 0, 0, 0)');\r\n        gradient.addColorStop(0.5, 'rgba(0, 0, 0, 0)');\r\n        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n        getChangesAndDoubleFactorPerWeek().then(value => {\r\n            const myChart = new Chart('verified-avg-chart', {\r\n                plugins:[ChartDataLabels],\r\n                type: 'line',\r\n                data: {\r\n                  \r\n                    datasets: [{\r\n                        label: {\r\n                          \r\n                        },\r\n                        data: value.length > 0 ? value.map(data => data.avgChangeByWeek) : undefined,\r\n                        \r\n                        backgroundColor:\r\n                            gradient\r\n                        ,\r\n                        borderColor:\r\n                            '#53ccfd'\r\n                        ,\r\n                        borderWidth: 5,\r\n                        pointRadius: 0,\r\n                      \r\n                    },\r\n                        {\r\n                     \r\n                        type: 'bubble',\r\n                        label: {\r\n                        \r\n                        },\r\n                        data: value.length > 0 ? value.map(data => data.avgChangeByWeek) : undefined,\r\n                      \r\n                        backgroundColor:\r\n                            gradient\r\n                        ,\r\n                        borderColor:\r\n                            '#53ccfd'\r\n                        ,\r\n                        borderWidth: 5,\r\n                        pointRadius: 0,\r\n                        \r\n                    }\r\n                    ]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    \r\n                    title: {\r\n                        display: true,\r\n                        text:  '',\r\n               \r\n                    \r\n                    },\r\n                    legend: {\r\n                    \r\n                        display: false,\r\n                    },\r\n                    scales: {\r\n                    \r\n                        xAxes: [{\r\n                            id:'first',\r\n                            labels: value.map(data => data.day),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: '',\r\n                                fontSize: 15,\r\n                               \r\n                            },\r\n                            gridLines: {\r\n                                display:false\r\n                            },\r\n                          \r\n                            \r\n                        }],\r\n                        yAxes: [{\r\n                            labels: value.map(data => data.avgChangeByWeek),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'אחוז שינוי יומי',\r\n                                fontSize: 15,\r\n                                fontColor:'black'\r\n                            },\r\n                            ticks: {\r\n                              \r\n                                maxTicksLimit: 5,\r\n                                callback: (value) => {\r\n                                    return value+\"%\"\r\n                                }\r\n                            },\r\n                            gridLines: {\r\n                                display:false\r\n                            }\r\n                            \r\n                            \r\n                        }]\r\n                    },\r\n                    tooltips: {\r\n                        enabled:false\r\n                    },\r\n                    layout: {\r\n                        \r\n                        padding: {\r\n                            top: 20,\r\n                            right:25\r\n                     }  \r\n                   },\r\n                    plugins: {\r\n                        datalabels: {\r\n                            clamp:false,\r\n                            display:'auto',\r\n                            textAlign:'center',\r\n                            align: 'top',\r\n                            \r\n                            formatter: (text,context)=> {\r\n                                return `${text}% \\n (${value[context.dataIndex].daysToDoubleSickPeople})`\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            })\r\n            setChart(myChart)\r\n        }\r\n            \r\n                \r\n        )\r\n\r\n    }, [])\r\n   \r\n    \r\n\r\n    \r\n\r\n\r\n    return (\r\n    <div id=\"verified-avg-chart-container\" className={`medium-chart-container `}  >\r\n    <canvas id=\"verified-avg-chart\" ></canvas>\r\n    </div>)\r\n\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\SeriouslyIllWeek.js",["166","167"],"import React, { useEffect,useState } from 'react'\r\nimport Chart from 'chart.js'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport {updateCharByCurrentTheme} from '../../charts/utils'\r\n\r\nimport {  getSeriouslyIllWeek } from '../../server/data'\r\n\r\nChart.plugins.unregister(ChartDataLabels);\r\nexport default ({isThemeWhite}) => {\r\n    const [chart,setChart]=useState()\r\n    useEffect(() => {\r\n        if (chart) {\r\n            setChart(updateCharByCurrentTheme(chart,isThemeWhite))\r\n            chart.update();\r\n       }\r\n    },[isThemeWhite])\r\n\r\n    useEffect(() => {\r\n        let ctx = document.getElementById('seriously-ill-chart');\r\n        let gradient = ctx.getContext('2d').createLinearGradient(0, 0, 0, 500);\r\n    \r\n        gradient.addColorStop(0, 'rgba(104, 169, 169, 1)');\r\n        gradient.addColorStop(0.25, 'rgba(167, 205, 206, 0.5)');\r\n        gradient.addColorStop(0.35, 'rgba(0, 0, 0, 0)');\r\n        gradient.addColorStop(0.5, 'rgba(0, 0, 0, 0)');\r\n        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n        getSeriouslyIllWeek().then(value => {\r\n            var myChart = new Chart('seriously-ill-chart', {\r\n                plugins:[ChartDataLabels],\r\n                type: 'line',\r\n                data: {\r\n                  \r\n                    datasets: [{\r\n                        label: {\r\n                          \r\n                        },\r\n                        data: value.length > 0 ? value.map(data => data.count) : undefined,\r\n                        \r\n                        backgroundColor:\r\n                            gradient\r\n                        ,\r\n                        borderColor:\r\n                            'rgba(104, 169, 169, 1)'\r\n                        ,\r\n                        borderWidth: 5,\r\n                        pointRadius: 0,\r\n                      \r\n                    },\r\n                        {\r\n                     \r\n                        type: 'bubble',\r\n                        label: {\r\n                        \r\n                        },\r\n                        data: value.length > 0 ? value.map(data => data.count) : undefined,\r\n                      \r\n                        backgroundColor:\r\n                            gradient\r\n                        ,\r\n                        borderColor:\r\n                            'rgba(104, 169, 169, 1)'\r\n                        ,\r\n                        borderWidth: 5,\r\n                        pointRadius: 0,\r\n                        \r\n                    }\r\n                    ]\r\n                },\r\n                options: {\r\n                    \r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    title: {\r\n                        display: true,\r\n                        text:  '',\r\n               \r\n                    \r\n                    },\r\n                    legend: {\r\n                    \r\n                        display: false,\r\n                    },\r\n                    scales: {\r\n                       \r\n                        xAxes: [{\r\n                            \r\n                            labels: value.map(data => data.day),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: '',\r\n                                fontSize: 15,\r\n                            },\r\n                            gridLines: {\r\n                                display:false\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            labels: value.map(data => data.count),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: '',\r\n                                fontSize: 15,\r\n                            },\r\n                            ticks: {\r\n                              \r\n                                maxTicksLimit: 5,\r\n                                \r\n                            },\r\n                            gridLines: {\r\n                                display:false\r\n                            }\r\n                            \r\n                        }]\r\n                    },\r\n                    tooltips: {\r\n                        enabled:false\r\n                    },\r\n                    layout: {\r\n                        \r\n                        padding: {\r\n                            top: 20,\r\n                            right:25\r\n                     }  \r\n                   },\r\n                    plugins: {\r\n                        datalabels: {\r\n                            clamp:false,\r\n                            display:'auto',\r\n                            textAlign:'center',\r\n                            align:'top',\r\n                            \r\n                        }\r\n                    }\r\n                }\r\n\r\n            })\r\n            setChart(myChart)\r\n        }\r\n                \r\n        )\r\n        \r\n    }, [])\r\n   \r\n    \r\n\r\n    \r\n\r\n\r\n    return (\r\n    <div id=\"seriously-ill-chart-container\" className={`medium-chart-container `}  >\r\n    <canvas id=\"seriously-ill-chart\" ></canvas>\r\n    </div>)\r\n\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\VerifiedOutSideRedZone.js",["168","169","170","171","172","173"],"import React, { useEffect, useState } from 'react'\r\nimport Chart from 'chart.js'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport axios from 'axios';\r\nimport { getVerifiedOutsideRedZone } from '../../server/data'\r\nimport respiratoryChart from '../../charts/makeChart'\r\nimport {updateCharByCurrentTheme} from '../../charts/utils'\r\n\r\nChart.plugins.unregister(ChartDataLabels);\r\nexport default ({isThemeWhite}) => {\r\n    const [chart,setChart]=useState()\r\n    useEffect(() => {\r\n        if (chart) {\r\n            setChart(updateCharByCurrentTheme(chart,isThemeWhite))\r\n            chart.update();\r\n       }\r\n    },[isThemeWhite])\r\n    useEffect(() => {\r\n        let ctx = document.getElementById('verified-outside-red-chart');\r\n        getVerifiedOutsideRedZone().then(value => {\r\n            let myChart = new Chart('verified-outside-red-chart', {\r\n                plugins:[ChartDataLabels],\r\n                type: 'bar',\r\n                data: {\r\n                  \r\n                    datasets: [{\r\n                        label: {\r\n                          \r\n                        },\r\n                        data: value.length > 0 ? value.map(data => data.count) : undefined,\r\n                        \r\n                        borderColor:\r\n                            '#b8cb56'\r\n                        ,\r\n                        backgroundColor: '#b8cb56',\r\n                        borderWidth: 0,\r\n                        borderWidth:1,\r\n                        pointRadius: 0,\r\n                        barThickness:10,\r\n                      \r\n                    }\r\n                    ]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    title: {\r\n                        display: true,\r\n                        text:  '',\r\n               \r\n                    \r\n                    },\r\n                    legend: {\r\n                    \r\n                        display: false,\r\n                    },\r\n                    scales: {\r\n                    \r\n                        xAxes: [{\r\n                            \r\n                            labels: value.map(data => data.day),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: '',\r\n                                fontSize: 15,\r\n                            },\r\n                            gridLines: {\r\n                                display:false\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            labels: value.map(data => data.count),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: '',\r\n                                fontSize: 15,\r\n                            },\r\n                            ticks: {\r\n                              \r\n                                maxTicksLimit: 5,\r\n                               \r\n                            },\r\n                            gridLines: {\r\n                                display:false\r\n                            }\r\n                            \r\n                            \r\n                        }]\r\n                    },\r\n                    tooltips: {\r\n                        enabled:false\r\n                    },\r\n                    layout: {\r\n                        \r\n                        padding: {\r\n                            top: 20,\r\n                            right:25\r\n                     }  \r\n                   },\r\n                    plugins: {\r\n                        datalabels: {\r\n                            clamp:false,\r\n                            display: 'auto',\r\n                            offset:65,\r\n                            textAlign:'center',\r\n                            align:'top',\r\n                           \r\n                        }\r\n                    }\r\n                }\r\n\r\n            })\r\n            setChart(myChart)\r\n            \r\n        }\r\n                \r\n        )\r\n        \r\n    }, [])\r\n   \r\n    \r\n\r\n    \r\n\r\n\r\n    return (\r\n    <div id=\"verified-outside-red-chart-container\" className={`medium-chart-container `} >\r\n    <canvas id=\"verified-outside-red-chart\" ></canvas>\r\n    </div>)\r\n\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\WeeklyCharts.js",["174"],"import React, { useContext } from 'react'\r\nimport themeContext from '../context/ThemeContext'\r\n\r\nimport VerifiedAvgWeekly from './charts/VerifiedAvgWeekly'\r\nimport SeriouslyIllWeek from './charts/SeriouslyIllWeek'\r\nimport VerifiedOutSideRedZone from './charts/VerifiedOutSideRedZone'\r\nimport LookupTag from './LookupTag'\r\nexport default () => {\r\n    const { isThemeWhite } = useContext(themeContext)\r\n\r\n  return (\r\n    <div className={`spread-weekly ${isThemeWhite?'':'black-theme'}`}>\r\n        <h1 className=\"title\">מדדי התפשטות בהסתכלות שבועית</h1>\r\n        <div className=\"weekly-charts-container\">\r\n          <div id=\"verified-avg-container\" className=\"weekly-chart-container\">\r\n            <h3>מגמת שינוי במאומתים חדשים וקצב הכפלה</h3>\r\n            <LookupTag text='% שינוי בממוצע מאמתים חדשים שבועי, ומספר הימים להכפלת הנדבקים (בסוגריים)' isInfo={true}/>\r\n          <VerifiedAvgWeekly isThemeWhite={ isThemeWhite}/>\r\n          </div>\r\n          <div id=\"sick-seriously-chart\" className=\"weekly-chart-container flex-shrink-1\">\r\n            <h3>מספר החולים קשה וקריטי</h3>\r\n          <SeriouslyIllWeek isThemeWhite={isThemeWhite}/>\r\n          </div>\r\n          <div className=\"weekly-chart-container\">\r\n            <h3>מספר המאומתים החדשים מחוץ לאזורי ההתפשטות</h3>\r\n            <LookupTag text='הנתונים אינם כוללים מאומתים מישובים אדומים, מוסדות גריאטריים וחוזרים מחו\"ל'isInfo={true} />\r\n          <VerifiedOutSideRedZone isThemeWhite={isThemeWhite}/>\r\n          </div>\r\n        </div>\r\n      </div>)\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\LookupTag.js",["175"],"import React,{useContext} from 'react'\r\nimport themeContext from '../context/ThemeContext'\r\n\r\n\r\nexport default ({ text, isInfo }) => {\r\n  const { isThemeWhite } = useContext(themeContext)\r\n\r\n    return (\r\n    <div className={`lookup ${isThemeWhite?'':'black-theme'}`}>\r\n     {isInfo? <i class=\"fas fa-info-circle\"></i>:<i class=\"far fa-lightbulb\"></i>}\r\n        <div className=\"lookup-text\">{text||''}</div>\r\n    </div>)\r\n  }\r\n","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\EpidemicCurveChart.js",["176","177","178"],"import React,{useEffect,useState} from 'react'\r\nimport { getEpidemicCurve } from '../../server/data'\r\nimport Chart from 'chart.js'\r\nimport moment from 'moment'\r\nimport LookupTag from '../LookupTag'\r\nimport {updateCharByCurrentTheme} from '../../charts/utils'\r\n\r\nimport CustomSelect from '../CustomSelect'\r\n\r\nimport { getEnlightenmentVerifiedDoubleFromNow } from '../../server/data'\r\n\r\nexport default ({isThemeWhite}) => {\r\n    const [daysDoubledVerified,setDaysDoubleVerified]=useState(0)\r\n\r\n    const [startDate, setStartDate] = useState(moment().subtract(2, 'weeks').toDate());\r\n    \r\n    const [chart,setChart]=useState()\r\n    useEffect(() => {\r\n        if (chart) {\r\n            setChart(updateCharByCurrentTheme(chart,isThemeWhite))\r\n            chart.update();\r\n       }\r\n    },[isThemeWhite])\r\n    useEffect(() => {\r\n        getEnlightenmentVerifiedDoubleFromNow().then(value=>setDaysDoubleVerified(value))\r\n      },[])\r\n    useEffect(() => {\r\n        const isTwoLinesChart = startDate && moment().diff(moment(startDate), 'days') > 80 ;\r\n\r\n        let ctx = document.getElementById('epidemic-curve-chart');\r\n        let gradient = ctx.getContext('2d').createLinearGradient(0, 0, 0, 500);\r\n \r\n        gradient.addColorStop(0, 'rgba(83, 204, 253, 1)');\r\n        gradient.addColorStop(0.25, 'rgba(204, 243, 246, 0.5)');\r\n        gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n        getEpidemicCurve(startDate).then((value) => {            \r\n            let myChart = new Chart('epidemic-curve-chart', {\r\n           \r\n                type: 'line',\r\n                \r\n                data: {\r\n                  \r\n                    datasets: [{\r\n                        type: 'line',\r\n                        label: 'מאומתים מצטבר',\r\n                        yAxisID:'verified-all',\r\n                        data: value.length > 0 ? value.map(data => data.verifiedUntilDate) : undefined,\r\n                        \r\n                        backgroundColor:\r\n                            gradient\r\n                        ,\r\n                        borderColor:\r\n                            '#53ccfd'\r\n                        ,\r\n                        borderWidth: 5,\r\n                        pointRadius: 0,\r\n                        \r\n                    },\r\n                    {\r\n                     \r\n                        type: isTwoLinesChart?'line':'bar',\r\n                        label: 'מחלימים חדשים',\r\n                        data: value.length > 0 ? value.map(data => data.recoverOnDate) : undefined,\r\n                      \r\n                        backgroundColor:\r\n                            '#898989'\r\n                        ,\r\n                        borderColor:\r\n                            '#898989'\r\n                        ,\r\n                        borderWidth: 5,\r\n                        pointRadius: 0,\r\n                        \r\n                        },\r\n                        {\r\n                     \r\n                            type: 'bar',\r\n                            yAxisID:'new-cases',\r\n                            label: 'מאומתים חדשים',\r\n                            data: value.length > 0 ? value.map(data => data.verifiedOnDate) : undefined,\r\n                          \r\n                            backgroundColor:\r\n                                '#1c7d7e'\r\n                            ,\r\n                            borderColor:\r\n                                '#1c7d7e'\r\n                            ,\r\n                            borderWidth: 5,\r\n                            pointRadius: 0,\r\n                            \r\n                        }\r\n                    ]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    title: {\r\n                        display: true,\r\n                        text: '',\r\n               \r\n                    \r\n                    },\r\n                    legend: {\r\n                        align: 'start',\r\n                        rtl: true,\r\n                        \r\n                        onClick: (e) => e.stopPropagation(),\r\n                        labels: {\r\n                            usePointStyle: true,\r\n                            // fontSize: 7,\r\n                            boxWidth: 6,\r\n                            \r\n                            \r\n                        },\r\n                        \r\n                    },\r\n                    \r\n                    scales: {\r\n                        \r\n                        xAxes: [{\r\n                            \r\n                            labels: value.map(data => data.day),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'תאריך הבדיקה',\r\n                                fontSize: 15,\r\n                            },\r\n                            ticks: {\r\n                                maxTicksLimit:19,\r\n                            },\r\n                            gridLines: {\r\n                                display: false\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            id: 'verified-all',\r\n                            position: 'left',\r\n                            labels: value.map(data => data.verifiedUntilDate),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'מספר מקרים מצטבר',\r\n                                fontSize: 15,\r\n\r\n                            },\r\n                            ticks: {\r\n                                \r\n                                maxTicksLimit: 5,\r\n                              \r\n                            },\r\n                            gridLines: {\r\n                                display: true\r\n                            }\r\n                            \r\n                            \r\n                        }, {\r\n                            id: 'new-cases',\r\n                            position: 'right',\r\n                            labels: value.map(data => data.verifiedOnDate),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'מספר מקרים חדשים',\r\n                                fontSize: 15,\r\n                                \r\n                            },\r\n                            ticks: {\r\n                              \r\n                                maxTicksLimit: 5,\r\n                           \r\n                            },\r\n                            gridLines: {\r\n                                display: true\r\n                            }\r\n                            \r\n                            \r\n                        }]\r\n                    },\r\n                    tooltips: {\r\n                        mode:'index',\r\n                      intersect:true,\r\n                    },\r\n                    layout: {\r\n                        \r\n                        padding: {\r\n                            top: 20,\r\n                            right: 35\r\n                        }\r\n                    },\r\n                   \r\n                }\r\n                })\r\n                setChart(myChart)\r\n        })\r\n        \r\n\r\n    },[])\r\n    return (\r\n        <div className={`epidemic-chart-container chart-card ${isThemeWhite?'':'black-theme'}`}>\r\n        <div className=\"title-filter-wrapper\">\r\n          <h3>עקומה אפידמית</h3>\r\n          <CustomSelect\r\n            id=\"epidemic-curve-date-select\"\r\n            onChange={(selected) => setStartDate(selected)}\r\n            optionsArray={[{ value: moment('20/3/2020', 'DD/M/YYYY').toDate(), text: \"עד עכשיו\" },\r\n                           { value: moment().subtract(1, 'week').toDate(), text:\"שבוע אחרון\" },\r\n                           {isDefault:true, value: moment().subtract(2, 'weeks').toDate(), text: 'שבועיים אחרונים' },\r\n                           {value:moment().subtract(1,'month').toDate(),text:'חודש אחרון'}\r\n                                        ]} />\r\n        </div>\r\n        <LookupTag text={`'מספר הנדבקים היום הינו כפול מהמספר לפני ${daysDoubledVerified} ימים'`} isInfo={false} />\r\n        \r\n        <div className=\"large-chart-container\">\r\n        <canvas id=\"epidemic-curve-chart\">\r\n          \r\n        </canvas>\r\n      </div>\r\n        </div>\r\n        \r\n    )\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\CustomSelect.js",["179","180"],"import React,{useState,useEffect} from 'react'\r\n\r\nexport default ({optionsArray,id,onChange}) => {\r\n    \r\n    const [selectedOption,setSelectedOption]=useState(optionsArray.find(option => option.isDefault))\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    useEffect(() => {\r\n        onChange(selectedOption.value)\r\n    },[selectedOption])\r\n\r\n    return (\r\n        <div className=\"custom-select-wrapper\"\r\n            onClick={() => setIsOpen(!isOpen)}>\r\n            <div className=\"current-value\">\r\n                <i class={`fas fa-chevron-down ${isOpen?'rotateUp':''}`}></i>\r\n                {selectedOption.text||'none'}\r\n                </div>\r\n        <div className=\"custom-select\"\r\n           \r\n            name={`${id}-time`}\r\n            id={id}>\r\n            \r\n            <div className={`options-container ${isOpen?'open':''}`}>\r\n            {optionsArray.map((option) =>\r\n                <div\r\n                    className={`custom-option ${option.text===selectedOption.text?'selected':''}`}\r\n                    onClick={()=>setSelectedOption(option)}>{option.text}</div>)}\r\n            </div>\r\n   \r\n        </div>\r\n    </div>)\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\SeriouslyIllChart.js",["181","182","183","184","185"],"import React,{useEffect,useState} from 'react'\r\nimport { getEpidemicCurve, getSeriouslyIllAndRespiratoryUntilNow,getEnlightenmentSeriouslyIllUntilNow } from '../../server/data'\r\nimport Chart from 'chart.js'\r\nimport moment from 'moment'\r\nimport LookupTag from '../LookupTag'\r\n\r\nimport CustomSelect from '../CustomSelect'\r\nimport {updateCharByCurrentTheme} from '../../charts/utils'\r\n\r\n\r\nexport default ({isThemeWhite}) => {\r\n    const [noteData,setNoteData]=useState()\r\n\r\n    const [startDate, setStartDate] = useState(moment().subtract(2, 'weeks').toDate());\r\n    const [chart,setChart]=useState()\r\n    useEffect(() => {\r\n        if (chart) {\r\n            setChart(updateCharByCurrentTheme(chart,isThemeWhite))\r\n            chart.update();\r\n       }\r\n    },[isThemeWhite])\r\n    useEffect(() => {\r\n        getEnlightenmentSeriouslyIllUntilNow().then(value=>setNoteData(value))\r\n      },[])\r\n    useEffect(() => {\r\n        const isTwoLinesChart = startDate && moment().diff(moment(startDate), 'days') > 80 ;\r\n\r\n        // let ctx = document.getElementById('seriously-ill-and-respiratory-chart');\r\n        // let gradient = ctx.getContext('2d').createLinearGradient(0, 0, 0, 500);\r\n        // gradient.addColorStop(0, 'rgba(83, 204, 253, 1)');\r\n        // gradient.addColorStop(0.25, 'rgba(204, 243, 246, 0.5)');\r\n        // gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n        getSeriouslyIllAndRespiratoryUntilNow(startDate).then((value) => {            \r\n            let myChart = new Chart('seriously-ill-and-respiratory-chart', {\r\n           \r\n                type: 'line',\r\n                data: {\r\n                    datasets: [\r\n                        {\r\n                     \r\n                            type: 'line',\r\n                            label: 'חולים קשים',\r\n                            data: value.length > 0 ? value.map(data => data.seriouslyIllOnDate) : undefined,\r\n                            backgroundColor:'transparent',\r\n                            borderColor:\r\n                                '#b6ca51'\r\n                            ,\r\n                            borderWidth: 5,\r\n                            pointRadius: 0,\r\n                            \r\n                            },{\r\n                        type: 'line',\r\n                            label: 'מונשמים',\r\n                            backgroundColor:'transparent',\r\n                        \r\n                        data:value&& value.length > 0 ? value.map(data => data.respiratoryOnDate) : undefined,\r\n                        \r\n                      \r\n                        borderColor:\r\n                            '#50cbfd'\r\n                        ,\r\n                        borderWidth: 5,\r\n                        pointRadius: 0,\r\n                        \r\n                    },\r\n                   \r\n                        {\r\n                     \r\n                            type: 'bubble',\r\n                            \r\n                            label: {},\r\n                            data: value.length > 0 ? value.map(data => data.respiratoryOnDate) : undefined,\r\n                        \r\n                      \r\n                            borderColor:\r\n                                '#50cbfd'\r\n                            ,\r\n                            borderWidth: 5,\r\n                            pointRadius: 0,\r\n                            \r\n                        },\r\n                        {\r\n                     \r\n                            type: 'bubble',\r\n                            label: false,\r\n                            data: value.length > 0 ? value.map(data => data.seriouslyIllOnDate) : undefined,\r\n                      \r\n                            borderColor:\r\n                                '#b6ca51'\r\n                            ,\r\n                            borderWidth: 5,\r\n                            pointRadius: 0,\r\n                            \r\n                        }\r\n                    ]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    title: {\r\n                        display: true,\r\n                        text: '',\r\n               \r\n                    \r\n                    },\r\n                    legend: {\r\n                        align: 'start',\r\n                        rtl: true,\r\n                        \r\n                        onClick: (e) => e.stopPropagation(),\r\n                        labels: {\r\n                            usePointStyle: true,\r\n                            // fontSize: 7,\r\n                            boxWidth: 6,\r\n                            filter: (item, chart)=>{\r\n                                return item.datasetIndex!==2&&item.datasetIndex!==3\r\n                            }\r\n                            \r\n                        },\r\n                        \r\n                    },\r\n                    scales: {\r\n                    \r\n                        xAxes: [{\r\n                            \r\n                            labels: value.map(data => data.day),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'תאריך הבדיקה',\r\n                                fontSize: 15,\r\n                            },\r\n                            ticks: {\r\n                                maxTicksLimit:19,\r\n                            },\r\n                            gridLines: {\r\n                                display: false\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            id: 'verified-all',\r\n                            position: 'left',\r\n                            labels: value.map(data => data.verifiedUntilDate),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'מספר מקרים מצטבר',\r\n                                fontSize: 15,\r\n\r\n                            },\r\n                            ticks: {\r\n                                \r\n                                maxTicksLimit: 5,\r\n                              \r\n                            },\r\n                            gridLines: {\r\n                                display: true\r\n                            }\r\n                            \r\n                            \r\n                        }\r\n                            \r\n                            \r\n                        ]\r\n                    },\r\n                    tooltips: {\r\n                        mode:'index',\r\n                      intersect:true,\r\n                    },\r\n                    layout: {\r\n                        \r\n                        padding: {\r\n                            top: 20,\r\n                            right: 60\r\n                        }\r\n                    },\r\n                   \r\n                }\r\n            })\r\n            setChart(myChart)\r\n        \r\n        })\r\n\r\n    },[])\r\n    return (\r\n        <div className={`seriously-ill-and-respiratory-chart-container chart-card ${isThemeWhite?'':'black-theme'}`}>\r\n        <div className=\"title-filter-wrapper\">\r\n        <h3>חולים קשה ומונשמים</h3>\r\n          <CustomSelect\r\n            id=\"seriously-ill-and-respiratory-date-select\"\r\n            onChange={(selected) => setStartDate(selected)}\r\n            optionsArray={[{ value: moment('20/3/2020', 'DD/M/YYYY').toDate(), text: \"עד עכשיו\" },\r\n                           { value: moment().subtract(1, 'week').toDate(), text:\"שבוע אחרון\" },\r\n                           { value: moment().subtract(2, 'weeks').toDate(), text: 'שבועיים אחרונים' },\r\n                           {isDefault:true,value:moment().subtract(1,'month').toDate(),text:'חודש אחרון'}\r\n                                        ]} />\r\n        </div>\r\n        <LookupTag text={`סה\"כ ${noteData?noteData.seriouslyIllData:''} חולים קשה ו - ${noteData?noteData.respiratoryData:''} מונשמים מאז תחילת המשבר (מרץ 2020) `} isInfo={false} />\r\n        \r\n        <div  className=\"large-chart-container\">\r\n        <canvas id=\"seriously-ill-and-respiratory-chart\">\r\n          \r\n        </canvas>\r\n      </div>\r\n        </div>\r\n        \r\n    )\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\CitiesByColor.js",["186","187","188","189","190","191","192","193"],"import React,{useEffect, useState} from 'react'\r\nimport LookupTag from './LookupTag'\r\nimport moment from 'moment'\r\nimport { getCitiesData } from '../server/data'\r\nconst sortOptions = {\r\n    \r\n    name: 'name',\r\n    grade: 'grade',\r\n    newIlls: 'new ills',\r\n    verifiedPercentage: 'verified percentage',\r\n    changesVerified: 'changes verified',\r\n    activeIlls:'active ills'\r\n}\r\nexport default ({isThemeWhite}) => {\r\n    const [cities, setCities] = useState([])\r\n    const [displayCities, setDisplayCities] = useState([])\r\n    const [sortObj,setSortObj]=useState({type:'',isDesc:true})\r\n    useEffect(() => {\r\n        getCitiesData().then((value) => {\r\n            setCities(value)\r\n            setDisplayCities(value)\r\n        })\r\n    }, [])\r\n\r\n    \r\n    useEffect(function filterHandler  () {\r\n        switch (sortObj.type)\r\n        {\r\n            case sortOptions.name:\r\n                if(sortObj.isDesc)\r\n                    setDisplayCities([...displayCities.sort((a, b) => a.city.name.localeCompare(b.city.name))])\r\n                else\r\n                    setDisplayCities([...displayCities.sort((a, b) => b.city.name.localeCompare(a.city.name))])\r\n            case sortOptions.grade:\r\n                if(sortObj.isDesc)\r\n                    setDisplayCities([...displayCities.sort((a, b) => a.grade-b.grade)])\r\n                else\r\n                    setDisplayCities([...displayCities.sort((a, b) => b.grade-a.grade)])\r\n            case sortOptions.newIlls:\r\n                if(sortObj.isDesc)\r\n                    setDisplayCities([...displayCities.sort((a, b) => a.personsNewVerified-b.personsNewVerified)])\r\n                else\r\n                    setDisplayCities([...displayCities.sort((a, b) => b.personsNewVerified-a.personsNewVerified)])\r\n            case sortOptions.verifiedPercentage:\r\n                if(sortObj.isDesc)\r\n                    setDisplayCities([...displayCities.sort((a, b) => a.positiveTestsPercentage-b.positiveTestsPercentage)])\r\n                else\r\n                    setDisplayCities([...displayCities.sort((a, b) => b.positiveTestsPercentage-a.positiveTestsPercentage)])\r\n            case sortOptions.changesVerified:\r\n                if(sortObj.isDesc)\r\n                    setDisplayCities([...displayCities.sort((a, b) => a.changesBetweenWeeks-b.changesBetweenWeeks)])\r\n                else\r\n                    setDisplayCities([...displayCities.sort((a, b) => b.changesBetweenWeeks-a.changesBetweenWeeks)])\r\n            case sortOptions.activeIlls:\r\n                if(sortObj.isDesc)\r\n                    setDisplayCities([...displayCities.sort((a, b) => a.illsCount-b.illsCount)])\r\n                else\r\n                    setDisplayCities([...displayCities.sort((a, b) => b.illsCount-a.illsCount)])\r\n                \r\n\r\n        }\r\n   },[sortObj])\r\n    const getCityRow = (cityName, cityGrade, cityIlls10000, cityConfirmedPercentage,\r\n                        cityIllsChanges,cityIllsCount) => {\r\n        return (\r\n            <div className=\"line-container\">\r\n                <div className=\"data-container\">\r\n                    <span className=\"city-name\">{cityName}</span>\r\n                </div>\r\n                <div className=\"data-container center\">\r\n                    <span className={`city-grade ${cityGrade>8?'green-bg':cityGrade>5?'orange-bg':cityGrade>3?'yellow-bg':'red-bg'}`}>{cityGrade?cityGrade.toFixed(2):''}</span>\r\n                </div>\r\n                <div className=\"data-container center\">\r\n                    <span className=\"city-new-ill\">{cityIlls10000}</span>\r\n                </div>\r\n                <div className=\"data-container center\">\r\n                    <span className=\"city-confirmed\">{cityConfirmedPercentage}%</span>\r\n                </div>\r\n                <div className=\"data-container center\">\r\n                    <span className=\"city-changes\">{cityIllsChanges}%</span>\r\n                </div>\r\n                <div className=\"data-container center\">\r\n                <span className=\"city-ills-count\">{cityIllsCount}</span>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    const handleSetSortObj = (sortOption) => {\r\n        setSortObj({type: sortOption,isDesc: sortObj.type===sortOption?!sortObj.isDesc?true:false:true})\r\n    }\r\n    return (\r\n        <div className={`cities-by-color-container chart-card ${isThemeWhite?'':'black-theme'}`}>\r\n            <div className=\"top\">\r\n                <div className=\"title-wrapper\">\r\n                    <h3>תכנית הרמזור</h3>\r\n                    <h4>*מרכיבי ציון הרמזור (לפי נתוני השבוע האחרון)</h4>\r\n                </div>\r\n                <div className=\"flex-row-wrapper none-width search-tag\">\r\n                <LookupTag isInfo={true} text={`הנתונים נכונים לתאריך ${moment().format('DD/MM/YYYY').toString()}`} />\r\n                    <div className=\"search-wrapper\">\r\n                    <i class=\"fas fa-search\"></i>\r\n                    <input className=\"search-input\" placeholder=\"חיפוש יישוב\" type=\"text\" onChange={(e) => setDisplayCities(cities.filter(city => city.city.name.includes(e.target.value)))}></input>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div className=\"extra-large-chart-container\">\r\n                <div className=\"legends-container\">\r\n                    <div className=\"legend-container\">\r\n                        <div className=\"legend-color red-bg\"></div>\r\n                        <div className=\"legend-text\">\r\n                            <div className=\"legend-title\">אדום-פעילות מינימלית</div>\r\n                            <div className=\"legend-subtitle\">ציון 7.5 ומעלה</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"legend-container \">\r\n                        <div className=\"legend-color orange-bg\"></div>\r\n                        <div className=\"legend-text\">\r\n                            <div className=\"legend-title\">כתום - פעילות מצומצמת</div>\r\n                            <div className=\"legend-subtitle\">ציון בין 6 ל -7.5</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"legend-container \">\r\n                        <div className=\"legend-color bright-yellow-bg\"></div>\r\n                        <div className=\"legend-text\">\r\n                            <div className=\"legend-title\">צהוב - פעילות מוגבלת</div>\r\n                            <div className=\"legend-subtitle\">ציון בין 4.5 ל - 6</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"legend-container \">\r\n                        <div className=\"legend-color green-bg\"></div>\r\n                        <div className=\"legend-text\">\r\n                            <div className=\"legend-title\">ירוק - פעילות רחבה</div>\r\n                            <div className=\"legend-subtitle\">ציון עד 4.5</div>\r\n                        </div>\r\n                    </div>\r\n                   \r\n                </div>\r\n                 <div className=\"cities-container\">\r\n                        <div className=\"titles-container\">\r\n                        <div className=\"city-title blue-bright-bg\" onClick={()=>handleSetSortObj(sortOptions.name)}>ישוב</div>\r\n                            <div className=\"city-title center blue-bright-bg\" onClick={()=>handleSetSortObj(sortOptions.grade)}>ציון וצבע יומי</div>\r\n                            <div className=\"city-title center blue-dark-bg\" onClick={()=>handleSetSortObj(sortOptions.newIlls)}>חולים חדשים לכל 10,000*</div>\r\n                            <div className=\"city-title center blue-dark-bg\" onClick={()=>handleSetSortObj(sortOptions.verifiedPercentage)}>% הבדיקות החיוביות *</div>\r\n                            <div className=\"city-title center blue-dark-bg\" onClick={()=>handleSetSortObj(sortOptions.changesVerified)}>שיעור שינוי מאומתים *</div>\r\n                            <div className=\"city-title center blue-bright-bg\" onClick={()=>handleSetSortObj(sortOptions.activeIlls)}>חולים פעילים</div>\r\n                        </div>\r\n                    <ul className=\"cities-list\">\r\n                    {displayCities.map(({city,personsNewVerified,positiveTestsPercentage,changesBetweenWeeks,illsCount,grade})=>getCityRow(city.name,grade,personsNewVerified/10000,positiveTestsPercentage,changesBetweenWeeks,illsCount))}\r\n                    </ul>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\TestsWeekData.js",["194","195"],"import React,{useEffect,useState} from 'react'\r\nimport LookupTag from '../LookupTag'\r\nimport moment from 'moment'\r\nimport { getTestsSinceDate } from '../../server/data'\r\nimport Chart from 'chart.js'\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport {updateCharByCurrentTheme} from '../../charts/utils'\r\n\r\nChart.plugins.unregister(ChartDataLabels);\r\n\r\nexport default ({isThemeWhite}) => {\r\n    const [chart,setChart]=useState()\r\n    useEffect(() => {\r\n        if (chart) {\r\n            setChart(updateCharByCurrentTheme(chart,isThemeWhite))\r\n            chart.update();\r\n       }\r\n    },[isThemeWhite])\r\n    useEffect(() => {\r\n        getTestsSinceDate(moment().clone().subtract(1, 'week').toDate()).then((data) => {\r\n            let myChart = new Chart('tests-last-week-chart', {\r\n                plugins:[ChartDataLabels],\r\n                type: 'bar',\r\n                data: {\r\n                    datasets: [\r\n                        {\r\n                     \r\n                            type: 'bar',\r\n                            label: 'מאומתים',\r\n                            data: data.length > 0 ? data.map(dayData => dayData.verifiedCount) : undefined,\r\n                            backgroundColor:    '#348a8b',\r\n                            borderColor:\r\n                                '#348a8b'\r\n                            ,\r\n                            borderWidth: 2,\r\n                            barThickness:10,\r\n                            datalabels: {\r\n                                color: 'black',\r\n                                clamp:false,\r\n                                anchor:'end',\r\n                                textAlign:'center',\r\n                                backgroundColor: 'white',\r\n                                borderColor: '#348a8b',\r\n                                borderWidth: 2,\r\n                                borderRadius:5,\r\n                                padding: {\r\n                                    right:2,\r\n                                    left:2\r\n                                },\r\n                                formatter(text, context) {\r\n                                console.log(\"🚀 ~ file: TestsWeekData.js ~ line 43 ~ formatter ~ context\", context)\r\n                                   const allTestCount= data[context.dataIndex].allTestCount\r\n                                    if (text === 0)\r\n                                        return null\r\n                                    else\r\n                                        return (text/allTestCount)*100+\"%\"\r\n                                }\r\n                            }\r\n                            },{\r\n                        type: 'bar',\r\n                            label: 'בדיקות',\r\n                            backgroundColor: '#50cbfd',\r\n                            borderColor:'#50cbfd',\r\n                        \r\n                            data:data&& data.length > 0 ? data.map(dayData => dayData.allTestCount-dayData.verifiedCount) : undefined,\r\n                            borderWidth: 2,\r\n                            barThickness: 10,\r\n                          \r\n                                datalabels: {\r\n                                    color: 'black',\r\n                                    clamp:false,\r\n                                    anchor:'end',\r\n                                    textAlign:'center',\r\n                                    align: 'top',\r\n                                    formatter(text, context) {\r\n                                        const allTestCount = data[context.dataIndex].allTestCount;                                        \r\n                                             return allTestCount\r\n                                     }\r\n                                   \r\n                            }\r\n                           \r\n                            \r\n                        \r\n                        \r\n                    },\r\n                   \r\n                       \r\n                    ]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    title: {\r\n                        display: true,\r\n                        text: '',\r\n               \r\n                    \r\n                    },\r\n                    legend: {\r\n                       display:false\r\n                    },\r\n                   \r\n                    scales: {\r\n                    \r\n                        xAxes: [{\r\n                            stacked:true,\r\n                            labels: data.map(dayData => dayData.day),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'תאריך הבדיקה',\r\n                                fontSize: 15,\r\n                            },\r\n                            ticks: {\r\n                                maxTicksLimit:19,\r\n                            },\r\n                            gridLines: {\r\n                                display: false\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            stacked:true,\r\n                            labels: data.map(dayData => dayData.verifiedUntilDate),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'מספר בדיקות',\r\n                                fontSize: 15,\r\n\r\n                            },\r\n                            ticks: {\r\n                                \r\n                                maxTicksLimit: 5,\r\n                              \r\n                            },\r\n                            gridLines: {\r\n                                display: false\r\n                            }\r\n                            \r\n                            \r\n                        }\r\n                            \r\n                            \r\n                        ]\r\n                    },\r\n                    tooltips: {\r\n                        mode:'index',\r\n                        intersect: true,\r\n                        backgroundColor: 'white',\r\n                        bodyFontColor: 'black',\r\n                        callbacks: {\r\n                            title:()=>{}\r\n                        }\r\n                    },\r\n                    layout: {\r\n                        \r\n                        padding: {\r\n                            top: 55,\r\n                            right: 55\r\n                        }\r\n                    },\r\n                    \r\n                }\r\n            })\r\n            \r\n            setChart(myChart)\r\n        \r\n        })\r\n            \r\n        \r\n    },[])\r\n    return (\r\n        <div className={`tests-last-week chart-card ${isThemeWhite?'':'black-theme'}`}>\r\n            <div className=\"flex-row space-between\">\r\n                <h3>בדיקות לגילוי נבדקים</h3>\r\n                <div className=\"flex-row circle-legends-container\">\r\n                    <div className=\"flex-row circle-legend-container\">\r\n                        <div id=\"test-circle-legend\" className=\"circle-legend \"></div>\r\n                        <div className=\"legend-text\">מאומתים</div>    \r\n                    </div>\r\n                    <div className=\"flex-row circle-legend-container\">\r\n                        <div id=\"verified-circle-legend\" className=\"circle-legend \"></div>\r\n                        <div className=\"legend-text\">בדיקות</div> \r\n                    </div>\r\n                    </div>\r\n                   \r\n            </div>\r\n            <div className=\"lookups-container\">\r\n                <LookupTag text='סה\"כ 707,721 בדיקות בשבוע האחרון ( 6.54% אחוז המאומתים השבועי הממוצע)' isInfo={false} />\r\n                <LookupTag text=\"הנתונים אינם כוללים מידע על בדיקות לאבחון החלמה\" isInfo={true} />\r\n            </div>\r\n            <div className=\"large-chart-container\">\r\n                <canvas id=\"tests-last-week-chart\"></canvas>\r\n                </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\charts\\DeathsChartByDate.js",["196","197","198"],"import React,{useEffect,useState} from 'react'\r\nimport { getTotalDeaths, getDeathsSinceDateByDay } from '../../server/data'\r\nimport Chart from 'chart.js'\r\nimport moment from 'moment'\r\nimport LookupTag from '../LookupTag'\r\n\r\nimport CustomSelect from '../CustomSelect'\r\nimport {updateCharByCurrentTheme} from '../../charts/utils'\r\n\r\n\r\nexport default ({isThemeWhite}) => {\r\n    const [totalDeaths,setTotalDeaths]=useState()\r\n    const [startDate, setStartDate] = useState(moment().subtract(2, 'weeks').toDate());\r\n    const [chart,setChart]=useState()\r\n    useEffect(() => {\r\n        if (chart) {\r\n            setChart(updateCharByCurrentTheme(chart,isThemeWhite))\r\n            chart.update();\r\n       }\r\n    },[isThemeWhite])\r\n    useEffect(() => {\r\n        getTotalDeaths().then(value=>setTotalDeaths(value.deathsCount))\r\n    },[])\r\n    useEffect(() => {\r\n        getDeathsSinceDateByDay(startDate).then((value) => {            \r\n            let myChart = new Chart('deaths-chart-by-date', {\r\n           \r\n                type: 'line',\r\n                data: {\r\n                    datasets: [\r\n                        {\r\n                     \r\n                            type: 'bar',\r\n                            label: 'נפטרים',\r\n                            data: value.length > 0 ? value.map(data => data.count) : undefined,\r\n                            backgroundColor:'#1c7d7e',\r\n                            borderColor:\r\n                                '#1c7d7e'\r\n                            ,\r\n                            borderWidth: 5,\r\n                            pointRadius: 0,\r\n                            \r\n                            }\r\n                    ]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    title: {\r\n                        display: true,\r\n                        text: '',\r\n               \r\n                    \r\n                    },\r\n                    legend: {\r\n                        align: 'start',\r\n                        rtl: true,\r\n                        \r\n                        onClick: (e) => e.stopPropagation(),\r\n                        labels: {\r\n                            usePointStyle: true,\r\n                            // fontSize: 7,\r\n                            boxWidth: 6,\r\n                            filter: (item, chart)=>{\r\n                                return item.datasetIndex!==2&&item.datasetIndex!==3\r\n                            }\r\n                            \r\n                        },\r\n                        \r\n                    },\r\n                    scales: {\r\n                    \r\n                        xAxes: [{\r\n                            \r\n                            labels: value.map(data => data.day),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'תאריך ',\r\n                                fontSize: 15,\r\n                            },\r\n                            ticks: {\r\n                                maxTicksLimit:8,\r\n                            },\r\n                            gridLines: {\r\n                                display: false\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            id: 'verified-all',\r\n                            position: 'left',\r\n                            labels: value.map(data => data.verifiedUntilDate),\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: 'מספר נפטרים',\r\n                                fontSize: 15,\r\n\r\n                            },\r\n                            ticks: {\r\n                                \r\n                                maxTicksLimit: 5,\r\n                              \r\n                            },\r\n                            gridLines: {\r\n                                display: true\r\n                            }\r\n                            \r\n                            \r\n                        }\r\n                            \r\n                            \r\n                        ]\r\n                    },\r\n                    tooltips: {\r\n                        mode:'index',\r\n                      intersect:true,\r\n                    },\r\n                    layout: {\r\n                        \r\n                        padding: {\r\n                            top: 20,\r\n                            right: 25\r\n                        }\r\n                    },\r\n                   \r\n                }\r\n            })\r\n            setChart(myChart)\r\n        \r\n        })\r\n\r\n    },[])\r\n    return (\r\n        <div className={`deaths-chart-by-date-container chart-card ${isThemeWhite?'':'black-theme'}`}>\r\n        <div className=\"title-filter-wrapper\">\r\n          <h3>נפטרים</h3>\r\n          <CustomSelect\r\n            id=\"death-date-select\"\r\n            onChange={(selected) => setStartDate(selected)}\r\n            optionsArray={[{ value: moment('20/3/2020', 'DD/M/YYYY').toDate(), text: \"עד עכשיו\" },\r\n                           { value: moment().subtract(1, 'week').toDate(), text:\"שבוע אחרון\" },\r\n                           { value: moment().subtract(2, 'weeks').toDate(), text: 'שבועיים אחרונים' },\r\n                           {isDefault:true,value:moment().subtract(1,'month').toDate(),text:'חודש אחרון'}\r\n                                        ]} />\r\n        </div>\r\n        <LookupTag text={`סה\"כ ${totalDeaths} נפטרים מאז תחילת המשבר (מרץ 2020)`} isInfo={false} />\r\n        \r\n        <div className=\"medium-chart-container\">\r\n        <canvas id=\"deaths-chart-by-date\">\r\n          \r\n        </canvas>\r\n      </div>\r\n        </div>\r\n        \r\n    )\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\components\\ManagerPage.js",["199"],"import React from 'react'\r\n\r\nexport default () => {\r\n    \r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}","C:\\Users\\david\\Documents\\Talpiot_hi_tech\\React\\covid-19-dashboard\\covid19-dashboard\\src\\charts\\utils.js",[],{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":2,"column":10,"nodeType":"206","messageId":"207","endLine":2,"endColumn":14},{"ruleId":"208","severity":1,"message":"209","line":12,"column":1,"nodeType":"210","endLine":32,"endColumn":2},{"ruleId":"208","severity":1,"message":"209","line":4,"column":1,"nodeType":"210","endLine":27,"endColumn":2},{"ruleId":"211","severity":1,"message":"212","line":16,"column":13,"nodeType":"213","endLine":16,"endColumn":46},{"ruleId":"208","severity":1,"message":"209","line":4,"column":1,"nodeType":"210","endLine":35,"endColumn":2},{"ruleId":"214","severity":1,"message":"215","line":9,"column":17,"nodeType":"213","endLine":9,"endColumn":130},{"ruleId":"214","severity":1,"message":"215","line":21,"column":17,"nodeType":"213","endLine":21,"endColumn":130},{"ruleId":"214","severity":1,"message":"215","line":22,"column":17,"nodeType":"213","endLine":22,"endColumn":130},{"ruleId":"214","severity":1,"message":"215","line":23,"column":17,"nodeType":"213","endLine":23,"endColumn":141},{"ruleId":"204","severity":1,"message":"216","line":2,"column":29,"nodeType":"206","messageId":"207","endLine":2,"endColumn":38},{"ruleId":"204","severity":1,"message":"217","line":2,"column":40,"nodeType":"206","messageId":"207","endLine":2,"endColumn":48},{"ruleId":"204","severity":1,"message":"218","line":7,"column":8,"nodeType":"206","messageId":"207","endLine":7,"endColumn":17},{"ruleId":"204","severity":1,"message":"219","line":8,"column":8,"nodeType":"206","messageId":"207","endLine":8,"endColumn":14},{"ruleId":"204","severity":1,"message":"220","line":8,"column":18,"nodeType":"206","messageId":"207","endLine":8,"endColumn":24},{"ruleId":"204","severity":1,"message":"221","line":10,"column":8,"nodeType":"206","messageId":"207","endLine":10,"endColumn":20},{"ruleId":"208","severity":1,"message":"209","line":14,"column":1,"nodeType":"210","endLine":37,"endColumn":2},{"ruleId":"204","severity":1,"message":"222","line":3,"column":10,"nodeType":"206","messageId":"207","endLine":3,"endColumn":27},{"ruleId":"208","severity":1,"message":"209","line":7,"column":1,"nodeType":"210","endLine":57,"endColumn":2},{"ruleId":"223","severity":1,"message":"224","line":14,"column":5,"nodeType":"225","endLine":14,"endColumn":19,"suggestions":"226"},{"ruleId":"223","severity":1,"message":"227","line":45,"column":8,"nodeType":"225","endLine":45,"endColumn":16,"suggestions":"228"},{"ruleId":"208","severity":1,"message":"209","line":10,"column":1,"nodeType":"210","endLine":124,"endColumn":2},{"ruleId":"204","severity":1,"message":"229","line":20,"column":7,"nodeType":"206","messageId":"207","endLine":20,"endColumn":14},{"ruleId":"200","replacedBy":"230"},{"ruleId":"202","replacedBy":"231"},{"ruleId":"204","severity":1,"message":"222","line":3,"column":10,"nodeType":"206","messageId":"207","endLine":3,"endColumn":27},{"ruleId":"208","severity":1,"message":"209","line":6,"column":1,"nodeType":"210","endLine":47,"endColumn":2},{"ruleId":"223","severity":1,"message":"232","line":13,"column":8,"nodeType":"225","endLine":13,"endColumn":16,"suggestions":"233"},{"ruleId":"234","severity":1,"message":"235","line":21,"column":26,"nodeType":"236","messageId":"237","endLine":31,"endColumn":12},{"ruleId":"208","severity":1,"message":"209","line":6,"column":1,"nodeType":"210","endLine":44,"endColumn":2},{"ruleId":"223","severity":1,"message":"232","line":13,"column":8,"nodeType":"225","endLine":13,"endColumn":16,"suggestions":"238"},{"ruleId":"208","severity":1,"message":"209","line":7,"column":1,"nodeType":"210","endLine":118,"endColumn":2},{"ruleId":"204","severity":1,"message":"239","line":4,"column":8,"nodeType":"206","messageId":"207","endLine":4,"endColumn":13},{"ruleId":"204","severity":1,"message":"240","line":6,"column":8,"nodeType":"206","messageId":"207","endLine":6,"endColumn":24},{"ruleId":"208","severity":1,"message":"209","line":9,"column":1,"nodeType":"210","endLine":167,"endColumn":2},{"ruleId":"223","severity":1,"message":"224","line":18,"column":7,"nodeType":"225","endLine":18,"endColumn":21,"suggestions":"241"},{"ruleId":"208","severity":1,"message":"209","line":9,"column":1,"nodeType":"210","endLine":154,"endColumn":2},{"ruleId":"223","severity":1,"message":"224","line":16,"column":7,"nodeType":"225","endLine":16,"endColumn":21,"suggestions":"242"},{"ruleId":"204","severity":1,"message":"239","line":4,"column":8,"nodeType":"206","messageId":"207","endLine":4,"endColumn":13},{"ruleId":"204","severity":1,"message":"240","line":6,"column":8,"nodeType":"206","messageId":"207","endLine":6,"endColumn":24},{"ruleId":"208","severity":1,"message":"209","line":10,"column":1,"nodeType":"210","endLine":131,"endColumn":2},{"ruleId":"223","severity":1,"message":"224","line":17,"column":7,"nodeType":"225","endLine":17,"endColumn":21,"suggestions":"243"},{"ruleId":"204","severity":1,"message":"244","line":19,"column":13,"nodeType":"206","messageId":"207","endLine":19,"endColumn":16},{"ruleId":"245","severity":1,"message":"246","line":37,"column":25,"nodeType":"247","messageId":"248","endLine":37,"endColumn":36},{"ruleId":"208","severity":1,"message":"209","line":8,"column":1,"nodeType":"210","endLine":31,"endColumn":2},{"ruleId":"208","severity":1,"message":"209","line":5,"column":1,"nodeType":"210","endLine":13,"endColumn":4},{"ruleId":"208","severity":1,"message":"209","line":12,"column":1,"nodeType":"210","endLine":219,"endColumn":2},{"ruleId":"223","severity":1,"message":"224","line":23,"column":7,"nodeType":"225","endLine":23,"endColumn":21,"suggestions":"249"},{"ruleId":"223","severity":1,"message":"250","line":195,"column":7,"nodeType":"225","endLine":195,"endColumn":9,"suggestions":"251"},{"ruleId":"208","severity":1,"message":"209","line":3,"column":1,"nodeType":"210","endLine":32,"endColumn":2},{"ruleId":"223","severity":1,"message":"252","line":9,"column":7,"nodeType":"225","endLine":9,"endColumn":23,"suggestions":"253"},{"ruleId":"204","severity":1,"message":"254","line":2,"column":10,"nodeType":"206","messageId":"207","endLine":2,"endColumn":26},{"ruleId":"208","severity":1,"message":"209","line":11,"column":1,"nodeType":"210","endLine":206,"endColumn":2},{"ruleId":"223","severity":1,"message":"224","line":21,"column":7,"nodeType":"225","endLine":21,"endColumn":21,"suggestions":"255"},{"ruleId":"204","severity":1,"message":"256","line":26,"column":15,"nodeType":"206","messageId":"207","endLine":26,"endColumn":30},{"ruleId":"223","severity":1,"message":"250","line":182,"column":7,"nodeType":"225","endLine":182,"endColumn":9,"suggestions":"257"},{"ruleId":"208","severity":1,"message":"209","line":14,"column":1,"nodeType":"210","endLine":154,"endColumn":2},{"ruleId":"258","severity":1,"message":"259","line":27,"column":9,"nodeType":"260","messageId":"261","endLine":61,"endColumn":10},{"ruleId":"262","severity":1,"message":"263","line":34,"column":13,"nodeType":"264","messageId":"265","endLine":38,"endColumn":89},{"ruleId":"262","severity":1,"message":"263","line":39,"column":13,"nodeType":"264","messageId":"265","endLine":43,"endColumn":115},{"ruleId":"262","severity":1,"message":"263","line":44,"column":13,"nodeType":"264","messageId":"265","endLine":48,"endColumn":125},{"ruleId":"262","severity":1,"message":"263","line":49,"column":13,"nodeType":"264","messageId":"265","endLine":53,"endColumn":117},{"ruleId":"262","severity":1,"message":"263","line":54,"column":13,"nodeType":"264","messageId":"265","endLine":58,"endColumn":97},{"ruleId":"223","severity":1,"message":"266","line":62,"column":6,"nodeType":"225","endLine":62,"endColumn":15,"suggestions":"267"},{"ruleId":"208","severity":1,"message":"209","line":11,"column":1,"nodeType":"210","endLine":195,"endColumn":2},{"ruleId":"223","severity":1,"message":"224","line":18,"column":7,"nodeType":"225","endLine":18,"endColumn":21,"suggestions":"268"},{"ruleId":"208","severity":1,"message":"209","line":11,"column":1,"nodeType":"210","endLine":155,"endColumn":2},{"ruleId":"223","severity":1,"message":"224","line":20,"column":7,"nodeType":"225","endLine":20,"endColumn":21,"suggestions":"269"},{"ruleId":"223","severity":1,"message":"250","line":131,"column":7,"nodeType":"225","endLine":131,"endColumn":9,"suggestions":"270"},{"ruleId":"208","severity":1,"message":"209","line":3,"column":1,"nodeType":"210","endLine":10,"endColumn":2},"no-native-reassign",["271"],"no-negated-in-lhs",["272"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'useState' is defined but never used.","'LookupTag' is defined but never used.","'moment' is defined but never used.","'months' is defined but never used.","'CustomSelect' is defined but never used.","'getGeneralStatics' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'chart'. Either include it or remove the dependency array. You can also do a functional update 'setChart(c => ...)' if you only need 'chart' in the 'setChart' call.","ArrayExpression",["273"],"React Hook useEffect has missing dependencies: 'data' and 'isThemeWhite'. Either include them or remove the dependency array.",["274"],"'myChart' is assigned a value but never used.",["271"],["272"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["275"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'count'.","ArrowFunctionExpression","unsafeRefs",["276"],"'axios' is defined but never used.","'respiratoryChart' is defined but never used.",["277"],["278"],["279"],"'ctx' is assigned a value but never used.","no-dupe-keys","Duplicate key 'borderWidth'.","ObjectExpression","unexpected",["280"],"React Hook useEffect has a missing dependency: 'startDate'. Either include it or remove the dependency array.",["281"],"React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["282"],"'getEpidemicCurve' is defined but never used.",["283"],"'isTwoLinesChart' is assigned a value but never used.",["284"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","React Hook useEffect has a missing dependency: 'displayCities'. Either include it or remove the dependency array. You can also do a functional update 'setDisplayCities(d => ...)' if you only need 'displayCities' in the 'setDisplayCities' call.",["285"],["286"],["287"],["288"],"no-global-assign","no-unsafe-negation",{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"293","fix":"295"},{"desc":"289","fix":"296"},{"desc":"289","fix":"297"},{"desc":"289","fix":"298"},{"desc":"289","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"289","fix":"304"},{"desc":"300","fix":"305"},{"desc":"306","fix":"307"},{"desc":"289","fix":"308"},{"desc":"289","fix":"309"},{"desc":"300","fix":"310"},"Update the dependencies array to be: [chart, isThemeWhite]",{"range":"311","text":"312"},"Update the dependencies array to be: [data, isOpen, isThemeWhite]",{"range":"313","text":"314"},"Update the dependencies array to be: [data, isOpen]",{"range":"315","text":"316"},{"range":"317","text":"316"},{"range":"318","text":"312"},{"range":"319","text":"312"},{"range":"320","text":"312"},{"range":"321","text":"312"},"Update the dependencies array to be: [startDate]",{"range":"322","text":"323"},"Update the dependencies array to be: [onChange, selectedOption]",{"range":"324","text":"325"},{"range":"326","text":"312"},{"range":"327","text":"323"},"Update the dependencies array to be: [displayCities, sortObj]",{"range":"328","text":"329"},{"range":"330","text":"312"},{"range":"331","text":"312"},{"range":"332","text":"323"},[491,505],"[chart, isThemeWhite]",[1731,1739],"[data, isOpen, isThemeWhite]",[430,438],"[data, isOpen]",[499,507],[647,661],[541,555],[628,642],[784,798],[7331,7333],"[startDate]",[326,342],"[onChange, selectedOption]",[757,771],[7020,7022],[2797,2806],"[displayCities, sortObj]",[602,616],[708,722],[4727,4729]]